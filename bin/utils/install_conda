#!/usr/bin/env bash
export PATH=${PATH}:$(dirname $(readlink -f $0))

while [[ $# -gt 0 ]]
do
  case $1 in
    -os=*|--operating-system=*)
      operating_system="${1#*=}"
      shift # past argument=value
      ;;
    -os|--operating-system)
      operating_system="${2}"
      shift # past argument
      shift # past value
      ;;
    -url=*|--source-url=*)
      source_url="${1#*=}"
      shift # past argument=value
      ;;
    -url|--source-url)
      source_url="${2}"
      shift # past argument
      shift # past value
      ;;
    -p=*|--prefix=*)
      prefix="${1#*=}"
      shift # past argument=value
      ;;
    -p|--prefix)
      prefix="${2}"
      shift # past argument
      shift # past value
      ;;
    -ri=*|--reinstall=*)
      reinstall="${1#*=}"
      shift # past argument=value
      ;;
    -ri|--reinstall)
      reinstall="${2}"
      shift # past argument
      shift # past value
      ;;
    --default)
      operating_system="default"
      source_url="default"
      prefix="default"
      shift # past argument with no value
      ;;
    -*|--*)
      concat "error: unknown option ${1}"
      exit 1
      ;;
    *)
      ;;
  esac
done

case ${operating_system} in
  "")
    operating_system="default"
    ;;
esac

case ${source_url} in
  "")
    source_url="default"
    ;;
esac

case ${prefix} in
  "")
    prefix="default"
    ;;
esac

case ${reinstall} in
  "t"|"true")
    reinstall="true"
    ;;
  "f"|"false")
    reinstall=""
    ;;
  "")
    reinstall="default"
    ;;
esac

deactivate_all_conda_envs () {
  where_conda=$(conda_exists_where)
  if [[ "${where_conda}" != "" ]]
  then
    conda_profile="${where_conda}/etc/profile.d"
    conda_profile="$(builtin cd -- ${conda_profile} && pwd)"
    source_conda_command="source ${conda_profile}/conda.sh"
  fi
  if [[ ${CONDA_SHLVL} != "" ]]
  then
    for i in $(seq "${CONDA_SHLVL}")
    do
      command="${source_conda_command} &&\
        conda deactivate"
      command=$(concat command)
      bash -c "${command}"
    done
  fi
}

maybe_uninstall_conda () {
  if [[ "${reinstall}" == "default" ]]
  then
    reinstall="false"
  fi
  where_conda="$(conda_exists_where)"
  if [[ "${where_conda}" != "" ]]
  then
    if [[ "${reinstall}" == "true" ]]
    then
      deactivate_all_conda_envs
      bash -c "rm -rf ${where_conda}"
      echo "removed conda located here: ${where_conda}"
    fi
  fi
}

install_conda () {
  detected_os="$(detect_os)"
  valid_os="$(is_os_valid --operating-system ${operating_system})"
  if [[ "${valid_os}" = "false" ]]
  then
    concat "error: target os (${operating_system})
      does not match detected os (${detected_os})"
    exit 1
  fi
  if [[ "${prefix}" = "default" ]]
  then
    prefix_dir="$(pwd)"
    prefix_arg="-p ${prefix_dir}/conda"
  elif [[ ${prefix} != "" ]]
  then
    if [[ -d "${prefix}" ]]
    then
      prefix_dir="$(builtin cd -- ${prefix} && pwd)"
      prefix_arg="-p ${prefix_dir}/conda"
    fi
  elif [[ "${prefix}" == "" ]]
  then
    prefix_arg=""
  fi
  if [[ "${source_url}" == "default" ]]
  then
    kernel_name="$(uname)"
    machine_arch="$(uname -m)"
    source_url="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-${kernel_name}-${machine_arch}.sh"
  fi
  curl_command="curl -L ${source_url} -o miniforge.sh"
  command="${curl_command} &&
    bash miniforge.sh -b -u ${prefix_arg} &&
    rm -f miniforge.sh &&
    ${prefix_dir}/conda/bin/conda init"
  command=$(concat ${command})
  if [[ "${command}" != "" ]]
  then
    bash -c "${command}"
  fi
}

maybe_uninstall_conda
where_conda="$(conda_exists_where)"
if [[ "${where_conda}" = "" ]]
then
  install_conda
else
  echo "conda already installed"
fi
